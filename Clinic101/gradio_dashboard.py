import os
import django
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Django settings ‡∏Å‡πà‡∏≠‡∏ô import ‡πÇ‡∏°‡πÄ‡∏î‡∏•
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Clinic101.settings")
django.setup()

import gradio as gr
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from django.utils.timezone import now, localtime
from django.db.models import Count, Sum
from django.db.models.functions import TruncMonth
from base.models import TreatmentHistory, Appointment, Treatment, Dentist
from matplotlib.ticker import FuncFormatter
import matplotlib.dates as mdates
from datetime import datetime
from calendar import month_name

# ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ matplotlib backend ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
import matplotlib
matplotlib.use('Agg')  # ‡πÉ‡∏ä‡πâ Agg Backend ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Tkinter

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå
THEME_COLORS = {
    'primary': '#4F6CD9',         # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ö‡∏´‡∏•‡∏±‡∏Å
    'secondary': '#29B695',       # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡πâ‡∏ô‡∏ó‡πå
    'accent': '#FF7676',          # ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
    'neutral': '#516173',         # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏°‡∏ü‡πâ‡∏≤
    'background': '#F8FAFC',      # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    'text': '#334155',            # ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
}

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ matplotlib
plt.rcParams.update({
    'font.family': 'Tahoma',
    'font.size': 10,
    'axes.labelsize': 12,
    'axes.titlesize': 14,
    'axes.titleweight': 'bold',
    'axes.labelweight': 'bold',
    'axes.spines.top': False,
    'axes.spines.right': False,
    'axes.grid': True,
    'grid.linestyle': '--',
    'grid.alpha': 0.7,
    'figure.facecolor': THEME_COLORS['background'],
})

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó
def money_fmt(x, pos):
    return f'{int(x):,} ‡∏ø'

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def fetch_dashboard_data():
    today = localtime(now()).date()
    current_month = today.month
    current_year = today.year

    # ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    total_income_today = TreatmentHistory.objects.filter(appointment__date=today).aggregate(Sum('cost'))['cost__sum'] or 0
    total_income_month = TreatmentHistory.objects.filter(appointment__date__year=current_year, appointment__date__month=current_month).aggregate(Sum('cost'))['cost__sum'] or 0
    total_income_all = TreatmentHistory.objects.aggregate(Sum('cost'))['cost__sum'] or 0

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    appointments_by_month = (
        Appointment.objects.filter(date__year=current_year)
        .annotate(month=TruncMonth('date'))
        .values('month')
        .annotate(total=Count('id'))
        .order_by('month')
    )

    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
    appointments_by_status = (
        Appointment.objects.values('status')
        .annotate(total=Count('id'))
    )

    # ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
    revenue_by_treatment = (
        TreatmentHistory.objects.values('appointment__treatment__treatmentName')
        .annotate(total_revenue=Sum('cost'))
        .order_by('-total_revenue')
    )

    # ‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    top_dentists = (
        Appointment.objects.values('dentist__dentistName')
        .annotate(total=Count('id'))
        .order_by('-total')
    )

    # ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_revenue = (
        TreatmentHistory.objects.filter(appointment__date__year=current_year)
        .annotate(month=TruncMonth('appointment__date'))
        .values('month')
        .annotate(total=Sum('cost'))
        .order_by('month')
    )

    return {
        "total_income_today": total_income_today,
        "total_income_month": total_income_month,
        "total_income_all": total_income_all,
        "appointments_by_month": list(appointments_by_month),
        "appointments_by_status": list(appointments_by_status),
        "revenue_by_treatment": list(revenue_by_treatment),
        "top_dentists": list(top_dentists),
        "monthly_revenue": list(monthly_revenue),
    }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
def plot_monthly_revenue(data):
    fig, ax = plt.subplots(figsize=(10, 5))
    fig.patch.set_facecolor(THEME_COLORS['background'])

    if not data:
        ax.text(0.5, 0.5, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", fontsize=14, ha="center", va="center")
        ax.set_title("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        return fig

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    thai_months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."]
    months = [thai_months[m['month'].month - 1] for m in data]
    values = [m['total'] for m in data]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
    ax.plot(months, values, marker='o', markersize=8, linewidth=3, 
           color=THEME_COLORS['secondary'], markerfacecolor='white')
    
    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
    ax.fill_between(months, values, color=THEME_COLORS['secondary'], alpha=0.2)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏∏‡∏î
    for i, v in enumerate(values):
        ax.text(i, v + max(values)*0.05, f'{int(v):,} ‡∏ø', 
               ha='center', va='bottom', fontweight='bold')

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    ax.set_xlabel("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", labelpad=10)
    ax.set_ylabel("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)", labelpad=10)
    ax.set_title("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", pad=15)
    
    # ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÅ‡∏Å‡∏ô y ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó
    formatter = FuncFormatter(money_fmt)
    ax.yaxis.set_major_formatter(formatter)
    
    ax.grid(True, linestyle='--', alpha=0.6)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    fig.tight_layout()
    
    return fig

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏î‡πâ‡∏ß‡∏¢ Gradio
def create_dashboard():
    data = fetch_dashboard_data()
    
    # ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    income_today = f"{data['total_income_today']:,}"
    income_month = f"{data['total_income_month']:,}"
    income_all = f"{data['total_income_all']:,}"
    
    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    summary_html = f"""
    <div style="display: flex; flex-wrap: wrap; gap: 20px; justify-content: space-between;">
        <div style="background-color: #EDF2FF; border-radius: 12px; padding: 15px; min-width: 200px; flex: 1;">
            <h3 style="margin: 0; font-size: 18px; color: #4F6CD9;">üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
            <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold;">{income_today} ‡∏ø</p>
        </div>
        
        <div style="background-color: #E6FBF8; border-radius: 12px; padding: 15px; min-width: 200px; flex: 1;">
            <h3 style="margin: 0; font-size: 18px; color: #29B695;">üìÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</h3>
            <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold;">{income_month} ‡∏ø</p>
        </div>
        
        <div style="background-color: #FFF8E6; border-radius: 12px; padding: 15px; min-width: 200px; flex: 1;">
            <h3 style="margin: 0; font-size: 18px; color: #F5A623;">üíº ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
            <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold;">{income_all} ‡∏ø</p>
        </div>
    </div>
    """
    
    return summary_html

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã Gradio
with gr.Blocks(theme=gr.themes.Soft(primary_hue="blue")) as iface:
    gr.Markdown(
        """
        # üéØ ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°
        ### ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
        """
    )
    
    # ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏£‡∏∏‡∏õ
    summary_html = gr.HTML(create_dashboard)
    
    with gr.Row():
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        gr.Markdown("### üìä ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        monthly_revenue_chart = gr.Plot(plot_monthly_revenue(fetch_dashboard_data()["monthly_revenue"]))
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    def refresh_data():
        data = fetch_dashboard_data()
        return (
            create_dashboard(),
            plot_monthly_revenue(data["monthly_revenue"]),
        )
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    refresh_btn = gr.Button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", variant="primary")
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
    refresh_btn.click(
        fn=refresh_data,
        outputs=[summary_html, monthly_revenue_chart]
    )

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Gradio
iface.launch()
